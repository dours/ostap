open Ostap.Combinators

type ('a, 'b) tlexeme = ('a, Matcher.Token.t, 'b) cont -> 'b steps
type ('a, 'b) stream =
   < getAMPERAMPER : ('a, 'b) tlexeme;
     getAMPERSAND : ('a, 'b) tlexeme;
     getAND : ('a, 'b) tlexeme;
     getAS : ('a, 'b) tlexeme;
     getASSERT : ('a, 'b) tlexeme;
     getBACKQUOTE : ('a, 'b) tlexeme;
     getBANG : ('a, 'b) tlexeme;
     getBAR : ('a, 'b) tlexeme;
     getBARBAR : ('a, 'b) tlexeme;
     getBARRBRACKET : ('a, 'b) tlexeme;
     getBEGIN : ('a, 'b) tlexeme;
     getCHAR : ('a, 'b) tlexeme;
     getCLASS : ('a, 'b) tlexeme;
     getCOLON : ('a, 'b) tlexeme;
     getCOLONCOLON : ('a, 'b) tlexeme;
     getCOLONEQUAL : ('a, 'b) tlexeme;
     getCOLONGREATER : ('a, 'b) tlexeme;
     getCOMMA : ('a, 'b) tlexeme;
     getCONSTRAINT : ('a, 'b) tlexeme;
     getDO : ('a, 'b) tlexeme;
     getDONE : ('a, 'b) tlexeme;
     getDOT : ('a, 'b) tlexeme;
     getDOTDOT : ('a, 'b) tlexeme;
     getDOWNTO : ('a, 'b) tlexeme;
     getELSE : ('a, 'b) tlexeme;
     getEND : ('a, 'b) tlexeme;
     getEOF : ('a, 'b) tlexeme;
     getEQUAL : ('a, 'b) tlexeme;
     getEXCEPTION : ('a, 'b) tlexeme;
     getEXTERNAL : ('a, 'b) tlexeme;
     getFALSE : ('a, 'b) tlexeme;
     getFLOAT : ('a, 'b) tlexeme;
     getFOR : ('a, 'b) tlexeme;
     getFUN : ('a, 'b) tlexeme;
     getFUNCTION : ('a, 'b) tlexeme;
     getFUNCTOR : ('a, 'b) tlexeme;
     getGREATER : ('a, 'b) tlexeme;
     getGREATERRBRACE : ('a, 'b) tlexeme;
     getIF : ('a, 'b) tlexeme;
     getIN : ('a, 'b) tlexeme;
     getINCLUDE : ('a, 'b) tlexeme;
     getINFIXOP0 : ('a, 'b) tlexeme;
     getINFIXOP1 : ('a, 'b) tlexeme;
     getINFIXOP2 : ('a, 'b) tlexeme;
     getINFIXOP3 : ('a, 'b) tlexeme;
     getINFIXOP4 : ('a, 'b) tlexeme;
     getINHERIT : ('a, 'b) tlexeme;
     getINITIALIZER : ('a, 'b) tlexeme;
     getINT : ('a, 'b) tlexeme;
     getINT32 : ('a, 'b) tlexeme;
     getINT64 : ('a, 'b) tlexeme;
     getLABEL : ('a, 'b) tlexeme;
     getLAZY : ('a, 'b) tlexeme;
     getLBRACE : ('a, 'b) tlexeme;
     getLBRACELESS : ('a, 'b) tlexeme;
     getLBRACKET : ('a, 'b) tlexeme;
     getLBRACKETBAR : ('a, 'b) tlexeme;
     getLBRACKETGREATER : ('a, 'b) tlexeme;
     getLBRACKETLESS : ('a, 'b) tlexeme;
     getLESS : ('a, 'b) tlexeme;
     getLESSMINUS : ('a, 'b) tlexeme;
     getLET : ('a, 'b) tlexeme;
     getLIDENT : ('a, 'b) tlexeme;
     getLPAREN : ('a, 'b) tlexeme;
     getMATCH : ('a, 'b) tlexeme;
     getMETHOD : ('a, 'b) tlexeme;
     getMINUS : ('a, 'b) tlexeme;
     getMINUSDOT : ('a, 'b) tlexeme;
     getMINUSGREATER : ('a, 'b) tlexeme;
     getMODULE : ('a, 'b) tlexeme;
     getMUTABLE : ('a, 'b) tlexeme;
     getNATIVEINT : ('a, 'b) tlexeme;
     getNEW : ('a, 'b) tlexeme;
     getOBJECT : ('a, 'b) tlexeme;
     getOF : ('a, 'b) tlexeme;
     getOPEN : ('a, 'b) tlexeme;
     getOPTLABEL : ('a, 'b) tlexeme;
     getOR : ('a, 'b) tlexeme;
     getPLUS : ('a, 'b) tlexeme;
     getPLUSDOT : ('a, 'b) tlexeme;
     getPREFIXOP : ('a, 'b) tlexeme;
     getPRIVATE : ('a, 'b) tlexeme;
     getQUESTION : ('a, 'b) tlexeme;
     getQUOTE : ('a, 'b) tlexeme;
     getRBRACE : ('a, 'b) tlexeme;
     getRBRACKET : ('a, 'b) tlexeme;
     getREC : ('a, 'b) tlexeme;
     getRPAREN : ('a, 'b) tlexeme;
     getSEMI : ('a, 'b) tlexeme;
     getSEMISEMI : ('a, 'b) tlexeme;
     getSHARP : ('a, 'b) tlexeme;
     getSIG : ('a, 'b) tlexeme;
     getSTAR : ('a, 'b) tlexeme;
     getSTRING : ('a, 'b) tlexeme;
     getSTRUCT : ('a, 'b) tlexeme;
     getTHEN : ('a, 'b) tlexeme;
     getTILDE : ('a, 'b) tlexeme;
     getTO : ('a, 'b) tlexeme;
     getTRUE : ('a, 'b) tlexeme;
     getTRY : ('a, 'b) tlexeme;
     getTYPE : ('a, 'b) tlexeme;
     getUIDENT : ('a, 'b) tlexeme;
     getUNDERSCORE : ('a, 'b) tlexeme;
     getVAL : ('a, 'b) tlexeme;
     getVIRTUAL : ('a, 'b) tlexeme;
     getWHEN : ('a, 'b) tlexeme;
     getWHILE : ('a, 'b) tlexeme;
     getWITH : ('a, 'b) tlexeme;
     .. > as 'a

val implementation :  (('a, 'b) stream as 'c, unit, 'b) cont -> 'c -> 'b steps
val interface :       (('a, 'b) stream as 'c, unit, 'b) cont -> 'c -> 'b steps
val toplevel_phrase : (('a, 'b) stream as 'c, unit, 'b) cont -> 'c -> 'b steps
val use_file :        (('a, 'b) stream as 'c, unit, 'b) cont -> 'c -> 'b steps