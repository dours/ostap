digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(a)[]"];
node__1 [label="id=1, state (non-final)"];
node__1 -> node__2 [label="if(b-c)[]"];
node__2 [label="id=2, state (final)"];

}

digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(a)[a, b]"];
node__1 [label="id=1, state (non-final)"];
node__1 -> node__2 [label="if(b)[b]"];
node__2 [label="id=2, state (final)"];
node__1 -> node__2 [label="if(c)[a]"];

}

digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(a)[a, ab, b]"];
node__1 [label="id=1, state (non-final)"];
node__1 -> node__2 [label="if(b)[ab, b]"];
node__2 [label="id=2, state (non-final)"];
node__2 -> node__3 [label="ref(ab)[]"];
node__3 [label="id=3, state (non-final)"];
node__3 -> node__4 [label="ref(b)[]"];
node__4 [label="id=4, state (final)"];
node__3 -> node__4 [label="ref(a)[]"];
node__1 -> node__2 [label="if(c)[a, ab]"];

}

digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(\",')[Q, S]"];
node__1 [label="id=1, state (non-final)"];
node__1 -> node__2 [label="ref(Q)[S]"];
node__2 [label="id=2, state (final)"];
node__1 -> node__1 [label="if(\0-!,#-&,(-\255)[S]"];

}

digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(\",')[Q, S]"];
node__1 [label="id=1, state (non-final)"];
node__1 -> node__2 [label="ref(Q)[S]"];
node__2 [label="id=2, state (non-final)"];
subgraph cluster_0 {
  label="lookahead";
node__0_0 [label="id=0, state (start, non-final)"];
node__0_0 -> node__0_1 [label="if(A-Z,a-z)[]"];
node__0_1 [label="id=1, state (final)"];
}
node__2 -> node__0_0;
node__0_1 -> node__3;
node__3 [label="id=3, state (final)"];
node__1 -> node__1 [label="if(\0-!,#-&,(-\255)[S]"];

}

digraph X {
node__0 [label="id=0, state (start, non-final)"];
node__0 -> node__1 [label="if(c)[]"];
node__1 [label="id=1, state (non-final)"];
subgraph cluster_0 {
  label="lookahead";
node__0_0 [label="id=0, state (start, non-final)"];
node__0_0 -> node__0_1 [label="if(a-b)[]"];
node__0_1 [label="id=1, state (final)"];
}
node__1 -> node__0_0;
node__0_1 -> node__2;
node__2 [label="id=2, state (final)"];

}

